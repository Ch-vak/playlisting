{"version":3,"sources":["util/Spotify.js","components/loading/SpinnerIcon.js","components/loading/Spinner.js","components/Track/Track.js","components/TrackList/TrackList.js","components/Playlist/Playlist.js","components/SearchBar/SearchBar.js","components/SearchResults/SearchResults.js","components/App/App.js","index.js","registerServiceWorker.js"],"names":["accessToken","SpinnerIcon","style","margin","background","display","shapeRendering","width","height","viewBox","preserveAspectRatio","cx","cy","r","fill","stroke","strokeWidth","attributeName","repeatCount","dur","values","keyTimes","keySplines","calcMode","begin","Spinner","props","className","Track","addTrack","bind","removeTrack","event","this","onAdd","track","onRemove","isRemoval","onClick","name","artist","album","target","rel","href","preview","renderAction","React","Component","TrackList","tracks","map","key","id","Playlist","handleNameChange","onNameChange","value","onChange","defaultValue","playlistTracks","onSave","SearchBar","state","term","handleTermChange","search","searchEnter","reset","setState","onSearch","e","keyCode","onReset","placeholder","onKeyDown","SearchResults","searchResults","clientId","redirectUri","Spotify","getAccessToken","accessTokenMatch","window","location","match","expiresInMatch","expiresIn","Number","setTimeout","console","log","history","pushState","accessUrl","localStorage","setItem","JSON","stringify","fetch","headers","Authorization","then","response","json","jsonResponse","items","artists","uri","external_urls","spotify","img","preview_url","savePlaylist","trackUris","length","userId","method","body","playlistId","uris","getRedirect","App","playlistName","getItem","parse","visible","updatePlaylistName","updateSearchResults","showSpinner","hideSpinner","find","savedTrack","push","filter","currentTrack","playtracks","playtrack","splice","ReactDOM","render","document","getElementById","navigator","addEventListener","swUrl","process","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error"],"mappings":"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","file":"static/js/main.7b65c6dd.chunk.js","sourcesContent":["\n\nconst clientId = '9c619bb75d834ca3b4a2658a9b582ca1'; // Insert client ID here.\nconst redirectUri = 'https://github.com/ChrysostomosVakasiras/playlisting.git'; // Have to add this to your accepted Spotify redirect URIs on the Spotify API.\nlet accessToken;\n\nconst Spotify = {\n  getAccessToken  () {\n    if (accessToken) {\n      return accessToken;\n    }\n\n    const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\n    const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n    if (accessTokenMatch && expiresInMatch) {\n      accessToken = accessTokenMatch[1];\n      const expiresIn = Number(expiresInMatch[1]);\n      window.setTimeout(() => accessToken = '', expiresIn * 10000);\n      console.log('1')\n      window.history.pushState('Access Token', null, '/'); // This clears the parameters, allowing us to grab a new access token when it expires.\n      return accessToken;\n    } else {\n      const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\n      window.location = accessUrl;\n    }\n\n  },\n\n  search(term) {\n   \n      Spotify.getAccessToken()\n      localStorage.setItem(\"term\",JSON.stringify(term))\n      accessToken = Spotify.getAccessToken()\n    return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\n      headers: {\n        Authorization: `Bearer ${accessToken}`\n      }\n    }).then(response => {\n\n      return response.json()\n    }).then(jsonResponse => {\n      if (!jsonResponse.tracks ) {\n        console.log('did i went here?')\n        return [];\n      }\n      return jsonResponse.tracks.items.map(track => ({\n        id: track.id,\n        name: track.name,\n        artist: track.artists[0].name,\n        album: track.album.name,\n        uri: track.uri,\n        preview: track.album.artists[0].external_urls.spotify,\n        img:track.preview_url \n      }));\n    });\n  },\n\n  savePlaylist(name, trackUris) {\n    if (!name || !trackUris.length) {\n      return;\n    }\n\n    const accessToken = Spotify.getAccessToken();\n    const headers = { Authorization: `Bearer ${accessToken}` };\n    let userId;\n\n    return fetch('https://api.spotify.com/v1/me', {headers: headers}\n    ).then(response => response.json()\n    ).then(jsonResponse => {\n      userId = jsonResponse.id;\n      return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\n        headers: headers,\n        method: 'POST',\n        body: JSON.stringify({name: name})\n      }).then(response => response.json()\n      ).then(jsonResponse => {\n        const playlistId = jsonResponse.id;\n        return fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`, {\n          headers: headers,\n          method: 'POST',\n          body: JSON.stringify({uris: trackUris})\n        });\n      });\n    });\n  },\n    getRedirect() {\n      const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\n      window.location = accessUrl;\n    }\n};\n\nexport default Spotify;\n","import React from 'react'\n\nconst SpinnerIcon = () => {\n    return (\n     <svg  style={{margin: 'auto', background: 'none', display: 'block', shapeRendering: 'auto'}} width=\"324px\" height=\"324px\" viewBox=\"0 0 100 100\" preserveAspectRatio=\"xMidYMid\">\n     <circle cx={50} cy={50} r=\"17.7415\" fill=\"none\" stroke=\"#18161b\" strokeWidth={12}>\n       <animate attributeName=\"r\" repeatCount=\"indefinite\" dur=\"2.9411764705882355s\" values=\"0;26\" keyTimes=\"0;1\" keySplines=\"0 0.2 0.8 1\" calcMode=\"spline\" begin=\"-1.4705882352941178s\" />\n       <animate attributeName=\"opacity\" repeatCount=\"indefinite\" dur=\"2.9411764705882355s\" values=\"1;0\" keyTimes=\"0;1\" keySplines=\"0.2 0 0.8 1\" calcMode=\"spline\" begin=\"-1.4705882352941178s\" />\n     </circle>\n     <circle cx={50} cy={50} r=\"2.68588\" fill=\"none\" stroke=\"#9e2721\" strokeWidth={12}>\n       <animate attributeName=\"r\" repeatCount=\"indefinite\" dur=\"2.9411764705882355s\" values=\"0;26\" keyTimes=\"0;1\" keySplines=\"0 0.2 0.8 1\" calcMode=\"spline\" />\n       <animate attributeName=\"opacity\" repeatCount=\"indefinite\" dur=\"2.9411764705882355s\" values=\"1;0\" keyTimes=\"0;1\" keySplines=\"0.2 0 0.8 1\" calcMode=\"spline\" />\n     </circle>\n    </svg>\n    )\n}\nexport default SpinnerIcon","import React from 'react'\nimport  SpinnerIcon  from './SpinnerIcon'\nimport './Spinner.css'\n\n const Spinner = (props) => {\n    return (\n        <div className=\"Spinner\">\n            <SpinnerIcon/>\n            \n        </div>\n    )\n}\nexport default Spinner;","import React from 'react';\n\nimport './Track.css';\n\nclass Track extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n  }\n\n  addTrack(event) {\n    this.props.onAdd(this.props.track);\n  }\n\n  removeTrack(event) {\n    this.props.onRemove(this.props.track);\n  }\n\n  renderAction() {\n    if (this.props.isRemoval) {\n      return <button className=\"Track-action\" onClick={this.removeTrack}>-</button>\n    }\n    return <button className=\"Track-action\" onClick={this.addTrack}>+</button>;\n  }\n\n\n\n  render() {\n    // let background=this.props.track.img;\n    // let sectionStyle = {\n    //   width: \"200px\",\n    //   height: \"400px\",\n    //   backgroundImage: `url(${background})`\n    // };\n    return (\n      <div className=\"Track\">\n        <div className=\"Track-information\">\n          <h3>{this.props.track.name}</h3>\n          <p>{this.props.track.artist} | {this.props.track.album}</p>\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href={this.props.track.preview} >Preview On Spotify\n          \n           </a>\n        </div>\n        {this.renderAction()}\n      </div>\n    );\n  }\n}\n\nexport default Track;","import React from 'react';\n\nimport './TrackList.css';\n\nimport Track from '../Track/Track';\n\nclass TrackList extends React.Component {\n  render() {\n    return (\n      <div className=\"TrackList\">\n        {\n          this.props.tracks.map(track => {\n            return <Track track={track}\n                          key={track.id}\n                          onAdd={this.props.onAdd}\n                          isRemoval={this.props.isRemoval}\n                          onRemove={this.props.onRemove} />\n          })\n        }\n      </div>\n    );\n  }\n}\n\nexport default TrackList;","import React from 'react';\n\nimport './Playlist.css';\n\nimport TrackList from '../TrackList/TrackList';\n\n\nclass Playlist extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleNameChange = this.handleNameChange.bind(this);\n\n  }\n\n  handleNameChange(event) {\n    this.props.onNameChange(event.target.value);\n  }\n\n  render() {\n    return (\n      <div className=\"Playlist\">\n        <input onChange={this.handleNameChange} defaultValue={'New Playlist'} />\n        <TrackList tracks={this.props.playlistTracks}\n                   isRemoval={true}\n                   onRemove={this.props.onRemove} />\n        <button className=\"Playlist-save\" onClick={this.props.onSave}>SAVE TO SPOTIFY</button>\n      </div>\n    );\n  }\n}\n\nexport default Playlist;","import React from 'react';\n\nimport './SearchBar.css';\n\nclass SearchBar extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      term:''\n    };\n\n    this.handleTermChange = this.handleTermChange.bind(this);\n    this.search = this.search.bind(this);\n    this.searchEnter = this.searchEnter.bind(this);\n    this.reset=this.reset.bind(this)\n  }\n\n  handleTermChange(event) {\n    this.setState({term: event.target.value});\n  }\n\n  search() {\n    this.props.onSearch(this.state.term);\n\n  }\n  searchEnter(e){\n    if(e.keyCode!==13){\n       return \n    }\n    this.props.onSearch(this.state.term);\n  }\n  reset(){\n    this.props.onReset()\n  }\n \n\n  render() {\n    return (\n      <div className=\"SearchBar\">\n        <input placeholder=\"Enter A Song Title\" onChange={this.handleTermChange} onKeyDown={this.searchEnter}/>\n        <button className=\"SearchButton\"  onClick={this.search}>SEARCH</button>\n        <button className=\"SearchButton\"  onClick={this.reset}>RESET</button>\n      </div>\n    );\n  }\n}\n\nexport default SearchBar;","import React from 'react';\n\nimport './SearchResults.css';\n\nimport TrackList from '../TrackList/TrackList';\n\nclass SearchResults extends React.Component {\n  render() {\n    return (\n      <div className=\"SearchResults\">\n        <h2>Results</h2>\n        <TrackList tracks={this.props.searchResults} onAdd={this.props.onAdd} />\n      </div>\n    );\n  }\n}\n\nexport default SearchResults;","import React from 'react';\nimport './App.css';\nimport Spinner from '../loading/Spinner';\nimport Playlist from '../Playlist/Playlist';\nimport SearchBar from '../SearchBar/SearchBar';\nimport SearchResults from '../SearchResults/SearchResults';\nimport Spotify from '../../util/Spotify';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      searchResults: [],\n      playlistName:localStorage.getItem(\"playlistName\")?JSON.parse(localStorage.getItem(\"playlistName\")):'New Playlist',\n      visible:false,\n      playlistTracks:localStorage.getItem(\"playlist\")?JSON.parse(localStorage.getItem(\"playlist\")):[]\n\n    };\n    this.search = this.search.bind(this);\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\n    this.savePlaylist = this.savePlaylist.bind(this);\n    this.updateSearchResults=this.updateSearchResults.bind(this)\n    this.reset=this.reset.bind(this)\n  }\n  showSpinner(){\n    this.setState({\n      visible:true\n    })\n  }\n  hideSpinner(){\n    this.setState({\n      visible:false\n    })\n  }\n\n\n  search(term)  {\n\n    this.showSpinner()\n    Spotify.search(term).then(response=>response?response:Spotify.search(term)).then(searchResults => {\n      this.setState({searchResults:searchResults});\n    });\n    setTimeout(()=>this.hideSpinner(),1000)\n  }\n  addTrack(track) {\n\n    let tracks = this.state.playlistTracks;\n    if (tracks.find(savedTrack => savedTrack.id === track.id)) {\n      return \n    }\n\n    tracks.push(track);\n    this.setState({playlistTracks: tracks});\n    this.updateSearchResults()\n    localStorage.setItem(\"playlist\",JSON.stringify(this.state.playlistTracks))\n    localStorage.setItem(\"playlistName\",JSON.stringify(this.state.playlistName))\n  }\n\n  removeTrack(track) {\n    let tracks = this.state.playlistTracks;\n    tracks = tracks.filter(currentTrack => currentTrack.id !== track.id);\n\n    this.setState({playlistTracks: tracks});\n    localStorage.setItem(\"playlist\",JSON.stringify(this.state.playlistTracks))\n    localStorage.setItem(\"playlistName\",JSON.stringify(this.state.playlistName))\n  }\n\n  updatePlaylistName(name) {\n    this.setState({playlistName: name});\n  }\n  updateSearchResults(){\n    let tracks = this.state.searchResults;\n    let playtracks = this.state.playlistTracks;\n    tracks.map((track)=>{\n      return playtracks.map((playtrack)=>{\n        if(track.id === playtrack.id){\n           tracks.splice(track,1)\n            this.setState(()=>({\n            searchResults:tracks\n          }))\n        }\n        return null\n      })\n    })\n    \n  }\n\n  savePlaylist() {\n    this.showSpinner()\n     Spotify.getRedirect()\n    if (this.state.playlistTracks !==[]){\n    const trackUris = this.state.playlistTracks.map(track => track.uri);\n   \n    Spotify.savePlaylist(this.state.playlistName, trackUris).then(() => {\n      this.setState({\n        playlistName: 'Create New playlist?',\n        playlistTracks: []\n      });\n    })}\n    setTimeout(()=>this.hideSpinner(),1000)  \n  }\n  reset(){\n    this.setState(()=>({\n      playlistTracks:[]\n    }))\n    localStorage.setItem(\"playlist\",[])\n    localStorage.setItem(\"playlistName\",'Create New Playlist?')\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Play<span className=\"highlight\">list</span>ing</h1>\n    \n        <div className=\"App\">\n          <SearchBar onSearch={this.search} onReset={this.reset}/>\n          \n          <div className=\"App-playlist\">\n            <SearchResults searchResults={this.state.searchResults}\n                           onAdd={this.addTrack}  />\n            {this.state.visible? <Spinner/> :null}\n            <Playlist playlistName={this.state.playlistName}\n                      playlistTracks={this.state.playlistTracks}\n                      onNameChange={this.updatePlaylistName}\n                      onRemove={this.removeTrack}\n                      onSave={this.savePlaylist} />\n          </div>\n         \n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App/App';\nimport registerServiceWorker from './registerServiceWorker';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n      navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n          registration.onupdatefound = () => {\n            const installingWorker = registration.installing;\n            installingWorker.onstatechange = () => {\n              if (installingWorker.state === 'installed') {\n                if (navigator.serviceWorker.controller) {\n                  // At this point, the old content will have been purged and\n                  // the fresh content will have been added to the cache.\n                  // It's the perfect time to display a \"New content is\n                  // available; please refresh.\" message in your web app.\n                  console.log('New content is available; please refresh.');\n                } else {\n                  // At this point, everything has been precached.\n                  // It's the perfect time to display a\n                  // \"Content is cached for offline use.\" message.\n                  console.log('Content is cached for offline use.');\n                }\n              }\n            };\n          };\n        })\n        .catch(error => {\n          console.error('Error during service worker registration:', error);\n        });\n    });\n  }\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n"],"sourceRoot":""}